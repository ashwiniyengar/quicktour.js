// Generated by CoffeeScript 1.6.2
(function() {
  window.Quicktour = (function() {
    function Quicktour(item_list, options) {
      this.item_list = item_list;
      if (options == null) {
        options = {};
      }
      if (this.item_list == null) {
        this.item_list = [];
      }
      this.init_options(options);
    }

    Quicktour.prototype.init_options = function(options) {
      var _ref;

      this.elem_by_elem = options.elem_by_elem || false;
      this.fade_time = options.fade_time || 1000;
      if ((options.frame_opacity != null) && typeof options.frame_opacity === "number" && (1 >= (_ref = options.frame_opacity) && _ref >= 0)) {
        this.frame_opacity = options.frame_opacity;
      } else {
        this.frame_opacity = .7;
      }
      this.padding_dimensions = options.padding_dimensions || {
        top: 5,
        bottom: 5,
        left: 5,
        right: 5
      };
      this.border_dimensions = options.border_dimensions || {
        top: 3,
        bottom: 3,
        right: 3,
        left: 3
      };
      this.highlight_color = options.highlight_color || "#08c";
      this.text_color = options.text_color || options.highlight_color || "#08c";
      this.description_offset = options.description_offset || {
        top: 30,
        left: 0
      };
      return this.description_font = options.description_font || "'Helvetica Neue', Helvetica, sans-serif";
    };

    Quicktour.prototype.addItem = function(item) {
      if (!item.element instanceof jQuery) {
        console.log("You have to pass jqueries.");
        return null;
      }
      return this.item_list.push(item);
    };

    Quicktour.prototype.setOption = function(key, value) {
      this.options[key] = value;
      return this.init_options(this.options);
    };

    Quicktour.prototype.resetOptions = function(options) {
      if (options == null) {
        options = {};
      }
      return this.init_options(options);
    };

    Quicktour.prototype.start = function() {
      var height, item, new_elem, offset, text_elem, width, _i, _len, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;

      width = $(document).width();
      height = $(document).height();
      console.log(width);
      console.log(height);
      if (!this.frame) {
        this.frame = $("<div class='quicktour-frame'></div>");
      }
      this.frame.css("height", height);
      this.frame.css("width", width);
      this.frame.css("background-color", "rgba(0,0,0," + this.frame_opacity + ")");
      this.frame.css("position", "absolute");
      this.frame.css("top", 0);
      this.frame.css("left", 0);
      this.frame.css("display", "none");
      $("body").append(this.frame);
      this.frame.fadeIn(this.fade_in_time);
      console.log("starting the tour");
      _ref = this.item_list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.element == null) {
          console.log("your item doesnt have an element");
          continue;
        }
        console.log("touring element:");
        offset = item.element.offset();
        console.log(offset);
        new_elem = $("<div class='quicktour-highlight'></div>");
        new_elem.css("height", item.element.height());
        new_elem.css("width", item.element.width());
        new_elem.css("position", "absolute");
        new_elem.css("left", offset.left - (((_ref1 = item.padding_dimensions) != null ? _ref1.left : void 0) || this.padding_dimensions.left) - (((_ref2 = item.border_dimensions) != null ? _ref2.left : void 0) || this.border_dimensions.left) + "px");
        new_elem.css("top", offset.top - (((_ref3 = item.padding_dimensions) != null ? _ref3.top : void 0) || this.padding_dimensions.top) - (((_ref4 = item.border_dimensions) != null ? _ref4.top : void 0) || this.border_dimensions.top) + "px");
        console.log(offset.top);
        console.log(((_ref5 = item.padding_dimensions) != null ? _ref5.top : void 0) || this.padding_dimensions.top);
        console.log(((_ref6 = item.border_dimensions) != null ? _ref6.top : void 0) || this.border_dimensions.top);
        new_elem.css("border-top", "" + (item.border_dimensions ? item.border_dimensions.top : this.border_dimensions.top) + "px solid " + this.highlight_color);
        new_elem.css("border-right", "" + (item.border_dimensions ? item.border_dimensions.right : this.border_dimensions.right) + "px solid " + this.highlight_color);
        new_elem.css("border-bottom", "" + (item.border_dimensions ? item.border_dimensions.bottom : this.border_dimensions.bottom) + "px solid " + this.highlight_color);
        new_elem.css("border-left", "" + (item.border_dimensions ? item.border_dimensions.left : this.border_dimensions.left) + "px solid " + this.highlight_color);
        console.log("fucking padding top:");
        new_elem.css("padding-top", "" + (((_ref7 = item.padding_dimensions) != null ? _ref7.top : void 0) || this.padding_dimensions.top));
        new_elem.css("padding-right", "" + (((_ref8 = item.padding_dimensions) != null ? _ref8.right : void 0) || this.padding_dimensions.right));
        new_elem.css("padding-bottom", "" + (((_ref9 = item.padding_dimensions) != null ? _ref9.bottom : void 0) || this.padding_dimensions.bottom));
        new_elem.css("padding-left", "" + (((_ref10 = item.padding_dimensions) != null ? _ref10.left : void 0) || this.padding_dimensions.left));
        this.frame.append(new_elem);
        if (item.description == null) {
          continue;
        }
        text_elem = $("<div class='quicktour-description'>" + item.description + "</div>");
        text_elem.css("position", "absolute");
        text_elem.css("top", item.element.outerHeight() + offset.top + (((_ref11 = item.description_options) != null ? (_ref12 = _ref11.offset) != null ? _ref12.top : void 0 : void 0) || this.description_offset.top));
        text_elem.css("left", offset.left);
        console.log(offset.left);
        text_elem.css("width", item.element.outerWidth());
        text_elem.css("color", "" + this.text_color);
        text_elem.css("font-family", ((_ref13 = item.description_options) != null ? _ref13.font : void 0) || this.description_font);
        _results.push(this.frame.append(text_elem));
      }
      return _results;
    };

    return Quicktour;

  })();

  console.log("finished");

}).call(this);
